1)******************************************************


#include<stdio.h>
#include<stdlib.h>       


long memory[1000] ;
int pc , opcode , reg , address ;
int registers[4] , flag[] = {0,0,0,0,0,1};
long op1 , op2 ;

main(char *argv[] , int argc)
{
	FILE *fp ;
	int k ;
		fp = fopen("filename","r") ;
		if(fp==NULL)
		{
			printf("Invalid file name.") ;
			exit(0) ;
		}
		else
		{	
			pc = 0 ;
				
			while(!feof(fp))
				fscanf(fp,"%ld",&memory[pc++]) ;
			k = pc-1 ;
			//after storing is done re-intialize pc to 0
			pc=0 ;
			
			while(1) 
			{	
				opcode = memory[pc]/10000 ;
				reg = ((memory[pc]%10000)/1000) ;
				address = (memory[pc]%10000)%1000 ;
				
				switch(opcode)
				{
					case 0 :
						exit(0) ;
					break ;
					
					case 3 :	
						registers[reg]+=memory[address] ;
					break ;
					
					case 4 :	
						registers[reg]-=memory[address] ;
					break ;
					
					case 7 :	
						registers[reg]*=memory[address] ;
					break ;      	
					
					case 5 :	
						registers[reg]=memory[address] ;
					break ;
					
					case 6 :	
						memory[address]=registers[reg] ;
					break ;
					
					case 10 :	
						op1 = registers[reg] ;
						op2 = memory[address] ;
					break ;
										
					case 9 :	
						address = address-1 ;
						
						switch(reg)
						{
							case 0 :
								if(op1>op2)
									pc = address ;
								printf("\n%daddress : ",pc) ;
							break ;
							
							case 1 :
								if(op1>=op2)
									pc = address ;
							break ;
							
							case 2 :
								if(op1==op2)
									pc = address ;
							break ;
							
							case 3 :
								if(op1<op2)
									pc = address ;
							break ;
							
							case 4 :
								if(op1<=op2)
									pc = address ;
							break ;
							
							case 5 :
								pc = address ;
							break ;
						}
					break ;
					
					case 8 :	
						memory[address]/=registers[reg] ;
					break ;
					
					case 1 :	
						printf("Enter the value : ") ;
						scanf("%ld",&memory[address]) ;
					break ;
					
					case 2 :	
					  if(memory[address]==1)
						
					    printf("Number 1 is greater\n");
					  else
					    printf("Number 2 is greater\n");
					break ;
				}
				pc++ ;
			}
		}
	return 0 ;
}

2)****************************************************************
#include<stdio.h>
int n,nf;
int in[100];
int p[50];
int hit=0;
int i,j,k;
int pgfaultcnt=0;

void getData()
{
    printf("\nEnter length of page reference sequence:");
    scanf("%d",&n);
    printf("\nEnter the page reference sequence:");
    for(i=0; i<n; i++)
        scanf("%d",&in[i]);
    printf("\nEnter no of frames:");
    scanf("%d",&nf);
}

void initialize()
{
    pgfaultcnt=0;
    for(i=0; i<nf; i++)
        p[i]=9999;
}

int isHit(int data)
{
    hit=0;
    for(j=0; j<nf; j++)
    {
        if(p[j]==data)
        {
            hit=1;
            break;
        }

    }

    return hit;
}

int getHitIndex(int data)
{
    int hitind;
    for(k=0; k<nf; k++)
    {
        if(p[k]==data)
        {
            hitind=k;
            break;
        }
    }
    return hitind;
}

void dispPages()
{
    for (k=0; k<nf; k++)
    {
        if(p[k]!=9999)
            printf(" %d",p[k]);
    }

}

void dispPgFaultCnt()
{
    printf("\nTotal no of page faults:%d",pgfaultcnt);
}

void lru()
{
    initialize();

    int least[50];
    for(i=0; i<n; i++)
    {

        printf("\nFor %d :",in[i]);

        if(isHit(in[i])==0)
        {

            for(j=0; j<nf; j++)
            {
                int pg=p[j];
                int found=0;
                for(k=i-1; k>=0; k--)
                {
                    if(pg==in[k])
                    {
                        least[j]=k;
                        found=1;
                        break;
                    }
                    else
                        found=0;
                }
                if(!found)
                    least[j]=-9999;
            }
            int min=9999;
            int repindex;
            for(j=0; j<nf; j++)
            {
                if(least[j]<min)
                {
                    min=least[j];
                    repindex=j;
                }
            }
            p[repindex]=in[i];
            pgfaultcnt++;

            dispPages();
        }
        else
            printf("No page fault!");
    }
    dispPgFaultCnt();
}

int main()
{
    int choice;
    while(1)
    {
        printf("\nPage Replacement Algorithms\n1.Enter data\n2.LRU\nEnter your choice:");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            getData();
            break;
        case 2:
            lru();
            break;
            return 0;
            break;
        }
    }
}

